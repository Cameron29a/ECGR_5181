Begin System Initialization
Create Virtual Memory
Write Instructions to Memory
Check Instructions after writing to memory
Instruction #0: flw f0, 0(x1)
Instruction #1: fadd.s f4, f0, f2
Instruction #2: fsw f4, 0(x1)
Instruction #3: addi x1, x1, -4
Instruction #4: bne x1, x2, 0
Last address :20
=================Create CPU=================
==============================Simulation Begin==============================
=====================Simulation Loop #0=====================
=====================Simulation Loop #1=====================
=====================Simulation Loop #2=====================
=====================Simulation Loop #3=====================
=====================Simulation Loop #4=====================
=====================Simulation Loop #5=====================
=====================Simulation Loop #6=====================
=====================Simulation Loop #7=====================
=====================Simulation Loop #8=====================
=====================Simulation Loop #9=====================
=====================Simulation Loop #10=====================
=====================Simulation Loop #11=====================
=====================Simulation Loop #12=====================
=====================Simulation Loop #13=====================
=====================Simulation Loop #14=====================
=====================Simulation Loop #15=====================
=====================Simulation Loop #16=====================
=====================Simulation Loop #17=====================
=====================Simulation Loop #18=====================
=====================Simulation Loop #19=====================
=====================Simulation Loop #20=====================
=====================Simulation Loop #21=====================
=====================Simulation Loop #22=====================
=====================Simulation Loop #23=====================
=====================Simulation Loop #24=====================
=====================Simulation Loop #25=====================
=====================Simulation Loop #26=====================
=====================Simulation Loop #27=====================
=====================Simulation Loop #28=====================
=====================Simulation Loop #29=====================
Event Queue:
Clock: 0
Fetch Stage: flw f0, 0(x1)
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 1
Fetch Stage: fadd.s f4, f0, f2
Decode Stage: flw f0, 0(x1)
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 2
Fetch Stage: fadd.s f4, f0, f2
Decode Stage: No_Op
Execute Stage: flw f0, 0(x1)
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 3
Fetch Stage: fadd.s f4, f0, f2
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: flw f0, 0(x1)
Write Back Stage: No_Op

Clock: 4
Fetch Stage: fadd.s f4, f0, f2
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: flw f0, 0(x1)

Clock: 5
Fetch Stage: fadd.s f4, f0, f2
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 6
Fetch Stage: fsw f4, 0(x1)
Decode Stage: fadd.s f4, f0, f2
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 7
Fetch Stage: fsw f4, 0(x1)
Decode Stage: No_Op
Execute Stage: fadd.s f4, f0, f2
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 8
Fetch Stage: fsw f4, 0(x1)
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: fadd.s f4, f0, f2
Write Back Stage: No_Op

Clock: 9
Fetch Stage: fsw f4, 0(x1)
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: fadd.s f4, f0, f2

Clock: 10
Fetch Stage: fsw f4, 0(x1)
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 11
Fetch Stage: addi x1, x1, -4
Decode Stage: fsw f4, 0(x1)
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 12
Fetch Stage: addi x1, x1, -4
Decode Stage: No_Op
Execute Stage: fsw f4, 0(x1)
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 13
Fetch Stage: addi x1, x1, -4
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: fsw f4, 0(x1)
Write Back Stage: No_Op

Clock: 14
Fetch Stage: addi x1, x1, -4
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: fsw f4, 0(x1)

Clock: 15
Fetch Stage: addi x1, x1, -4
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 16
Fetch Stage: bne x1, x2, 0
Decode Stage: addi x1, x1, -4
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 17
Fetch Stage: bne x1, x2, 0
Decode Stage: No_Op
Execute Stage: addi x1, x1, -4
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 18
Fetch Stage: bne x1, x2, 0
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: addi x1, x1, -4
Write Back Stage: No_Op

Clock: 19
Fetch Stage: bne x1, x2, 0
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: addi x1, x1, -4

Clock: 20
Fetch Stage: bne x1, x2, 0
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 21
Fetch Stage: Invalid Op.
Decode Stage: bne x1, x2, 0
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 22
Fetch Stage: Invalid Op.
Decode Stage: No_Op
Execute Stage: bne x1, x2, 0
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 23
Fetch Stage: Invalid Op.
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: bne x1, x2, 0
Write Back Stage: No_Op

Clock: 24
Fetch Stage: Invalid Op.
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: bne x1, x2, 0

Clock: 25
Fetch Stage: Invalid Op.
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 26
Fetch Stage: Invalid Op.
Decode Stage: Invalid Op.
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 27
Fetch Stage: Invalid Op.
Decode Stage: No_Op
Execute Stage: Invalid Op.
Memory Stage: No_Op
Write Back Stage: No_Op

Clock: 28
Fetch Stage: Invalid Op.
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: Invalid Op.
Write Back Stage: No_Op

Clock: 29
Fetch Stage: Invalid Op.
Decode Stage: No_Op
Execute Stage: No_Op
Memory Stage: No_Op
Write Back Stage: Invalid Op.

